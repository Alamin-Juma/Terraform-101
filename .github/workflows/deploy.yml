name: Deploy EC2 Instance

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}     
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set_ip.outputs.server_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Updated to v4 for security

      - name: Set up Terraformname: Deploy EC2 Instance

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set_ip.outputs.server_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET_NAME }}" \
            -backend-config="key=terraform/terraform.tfstate" \
            -backend-config="region=us-east-1"
        working-directory: ./terraform

      - name: Validate Terraform configuration
        run: terraform validate
        working-directory: ./terraform

      - name: Plan Terraform deployment
        id: plan
        run: |
          terraform plan \
            -var="region=us-east-1" \
            -var="private_key=$PRIVATE_SSH_KEY" \
            -var="public_key=$PUBLIC_SSH_KEY" \
            -var="key_name=deployer-key" \
            -out=PLAN
        working-directory: ./terraform

      - name: Apply Terraform deployment
        id: apply
        run: terraform apply -auto-approve PLAN
        working-directory: ./terraform

      - name: Set output for server public IP
        id: set_ip
        run: |
          echo "server_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  deploy_app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./app  

      - name: Deploy to Docker container on EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        with:
          host: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          envs: REGISTRY,REPOSITORY,IMAGE_TAG,AWS_DEFAULT_REGION
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io awscli
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | sudo docker login --username AWS --password-stdin $REGISTRY
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:3000 $REGISTRY/$REPOSITORY:$IMAGE_TAG
            echo "Application deployed successfully!"
            echo "Server public IP: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}"
        uses: hashicorp/setup-terraform@v3  # Updated to v3 for security
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET_NAME }}" \
            -backend-config="key=terraform/terraform.tfstate" \
            -backend-config="region=us-east-1"
        working-directory: ./terraform

      - name: Validate Terraform configuration
        run: terraform validate
        working-directory: ./terraform

      - name: Plan Terraform deployment
        id: plan
        run: |
          terraform plan \
            -var="region=us-east-1" \
            -var="private_key=$PRIVATE_SSH_KEY" \
            -var="public_key=$PUBLIC_SSH_KEY" \
            -var="key_name=deployer-key" \
            -out=PLAN
        working-directory: ./terraform

      - name: Apply Terraform deployment
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform

      - name: Set output for server public IP
        id: set_ip
        run:  |
          echo "server_public_ip=$(terraform output instance_public_ip)" >> $GITHUB_ENV

    deploy_app: 
      runs-on: ubuntu-latest
      needs: deploy-infra
      steps:
        - name: Checkout
          uses: actions/checkout@v4  # Updated to v4 for security
        - name: Set IP env variable
          run: |
            echo "SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}" >> $GITHUB_ENV
                - name: Login to AWS ECR
        - name: Login to AWS ECR
          uses: aws-actions/amazon-ecr-login@v1
        - name: Build and push Docker image
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: example-node-app
            IMAGE_TAG: ${{ github.sha }}
            AWS_DEFAULT_REGION: us-east-1
          run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


        - name: Deploy to docker container on EC2
          env:
            PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
            SERVER_PUBLIC_IP: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: example-node-app
            IMAGE_TAG: ${{ github.sha }}
            uses: appleboy/ssh-action@v0.1.0
          with:
              host: ${{ env.SERVER_PUBLIC_IP }}
              username: ubuntu
              key: ${{ env.PRIVATE_SSH_KEY }}
              envs: REGISTRY, REPOSITORY, IMAGE_TAG, PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, AWS_REGION, AWS_DEFAULT_REGION
              script: |
                sudo apt update
                sudo apt install docker.io -y
                sudo apt install awscli -y
                sudo $(aws ecr get-login --no-include-email --region $AWS_REGION)
                sudo docker stop myappcontainer || true
                sudo docker rm myappcontainer || true 
                sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
                sudo docker run -d --name myappcontainer -p 80:3000 ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}
                echo "Application deployed successfully!"
                echo "Server public IP: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}"