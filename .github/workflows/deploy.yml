name: Deploy EC2 Instance

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Verify S3 bucket exists
        run: |
          if aws s3api head-bucket --bucket "$TF_STATE_BUCKET_NAME" 2>/dev/null; then
            echo "✅ S3 bucket $TF_STATE_BUCKET_NAME exists and is accessible"
          else
            echo "❌ S3 bucket $TF_STATE_BUCKET_NAME does not exist or is not accessible"
            exit 1
          fi

      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET_NAME" \
            -backend-config="key=terraform/terraform.tfstate" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="encrypt=true"
        working-directory: ./terraform

      - name: Validate Terraform configuration
        run: terraform validate
        working-directory: ./terraform

      - name: Format Terraform code
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Plan Terraform deployment
        id: plan
        run: |
          terraform plan \
            -var="region=$AWS_REGION" \
            -var="private_key=$PRIVATE_SSH_KEY" \
            -var="public_key=$PUBLIC_SSH_KEY" \
            -var="key_name=deployer-key" \
            -out=tfplan \
            -no-color
        working-directory: ./terraform

      - name: Show Terraform plan
        if: github.event_name == 'pull_request'
        run: |
          echo "## Terraform Plan" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        working-directory: ./terraform

      - name: Apply Terraform deployment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: |
          terraform apply tfplan
        working-directory: ./terraform

      - name: Get Terraform outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: outputs
        run: |
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        working-directory: ./terraform

      - name: Clean up plan file
        if: always()
        run: rm -f tfplan
        working-directory: ./terraform